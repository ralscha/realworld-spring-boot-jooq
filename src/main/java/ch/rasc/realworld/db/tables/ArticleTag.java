/*
 * This file is generated by jOOQ.
 */
package ch.rasc.realworld.db.tables;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ch.rasc.realworld.db.DefaultSchema;
import ch.rasc.realworld.db.Keys;
import ch.rasc.realworld.db.tables.records.ArticleTagRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleTag extends TableImpl<ArticleTagRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>article_tag</code>
	 */
	public static final ArticleTag ARTICLE_TAG = new ArticleTag();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ArticleTagRecord> getRecordType() {
		return ArticleTagRecord.class;
	}

	/**
	 * The column <code>article_tag.id</code>.
	 */
	public final TableField<ArticleTagRecord, Long> ID = createField(DSL.name("id"),
			SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>article_tag.article_id</code>.
	 */
	public final TableField<ArticleTagRecord, Long> ARTICLE_ID = createField(DSL.name("article_id"),
			SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>article_tag.tag_id</code>.
	 */
	public final TableField<ArticleTagRecord, Long> TAG_ID = createField(DSL.name("tag_id"),
			SQLDataType.BIGINT.nullable(false), this, "");

	private ArticleTag(Name alias, Table<ArticleTagRecord> aliased) {
		this(alias, aliased, null);
	}

	private ArticleTag(Name alias, Table<ArticleTagRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>article_tag</code> table reference
	 */
	public ArticleTag(String alias) {
		this(DSL.name(alias), ARTICLE_TAG);
	}

	/**
	 * Create an aliased <code>article_tag</code> table reference
	 */
	public ArticleTag(Name alias) {
		this(alias, ARTICLE_TAG);
	}

	/**
	 * Create a <code>article_tag</code> table reference
	 */
	public ArticleTag() {
		this(DSL.name("article_tag"), null);
	}

	public <O extends Record> ArticleTag(Table<O> child, ForeignKey<O, ArticleTagRecord> key) {
		super(child, key, ARTICLE_TAG);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public Identity<ArticleTagRecord, Long> getIdentity() {
		return (Identity<ArticleTagRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<ArticleTagRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_3;
	}

	@Override
	public List<ForeignKey<ArticleTagRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_ARTICLE_TAG_ARTICLE, Keys.FK_ARTICLE_TAG_TAG);
	}

	private transient Article _article;
	private transient Tag _tag;

	/**
	 * Get the implicit join path to the <code>PUBLIC.article</code> table.
	 */
	public Article article() {
		if (_article == null)
			_article = new Article(this, Keys.FK_ARTICLE_TAG_ARTICLE);

		return _article;
	}

	/**
	 * Get the implicit join path to the <code>PUBLIC.tag</code> table.
	 */
	public Tag tag() {
		if (_tag == null)
			_tag = new Tag(this, Keys.FK_ARTICLE_TAG_TAG);

		return _tag;
	}

	@Override
	public ArticleTag as(String alias) {
		return new ArticleTag(DSL.name(alias), this);
	}

	@Override
	public ArticleTag as(Name alias) {
		return new ArticleTag(alias, this);
	}

	@Override
	public ArticleTag as(Table<?> alias) {
		return new ArticleTag(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ArticleTag rename(String name) {
		return new ArticleTag(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ArticleTag rename(Name name) {
		return new ArticleTag(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ArticleTag rename(Table<?> name) {
		return new ArticleTag(name.getQualifiedName(), null);
	}

	// -------------------------------------------------------------------------
	// Row3 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row3<Long, Long, Long> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
	 */
	public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
		return convertFrom(Records.mapping(from));
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
	 */
	public <U> SelectField<U> mapping(Class<U> toType,
			Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
		return convertFrom(toType, Records.mapping(from));
	}
}
