/*
 * This file is generated by jOOQ.
 */
package ch.rasc.realworld.db.tables;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ch.rasc.realworld.db.DefaultSchema;
import ch.rasc.realworld.db.Keys;
import ch.rasc.realworld.db.tables.records.ArticleRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Article extends TableImpl<ArticleRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>article</code>
	 */
	public static final Article ARTICLE = new Article();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ArticleRecord> getRecordType() {
		return ArticleRecord.class;
	}

	/**
	 * The column <code>article.id</code>.
	 */
	public final TableField<ArticleRecord, Long> ID = createField(DSL.name("id"),
			SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>article.user_id</code>.
	 */
	public final TableField<ArticleRecord, Long> USER_ID = createField(DSL.name("user_id"),
			SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>article.slug</code>.
	 */
	public final TableField<ArticleRecord, String> SLUG = createField(DSL.name("slug"),
			SQLDataType.VARCHAR(255).nullable(false), this, "");

	/**
	 * The column <code>article.title</code>.
	 */
	public final TableField<ArticleRecord, String> TITLE = createField(DSL.name("title"),
			SQLDataType.VARCHAR(255).nullable(false), this, "");

	/**
	 * The column <code>article.description</code>.
	 */
	public final TableField<ArticleRecord, String> DESCRIPTION = createField(DSL.name("description"),
			SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>article.body</code>.
	 */
	public final TableField<ArticleRecord, String> BODY = createField(DSL.name("body"),
			SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>article.created_at</code>.
	 */
	public final TableField<ArticleRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"),
			SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

	/**
	 * The column <code>article.updated_at</code>.
	 */
	public final TableField<ArticleRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"),
			SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

	private Article(Name alias, Table<ArticleRecord> aliased) {
		this(alias, aliased, null);
	}

	private Article(Name alias, Table<ArticleRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>article</code> table reference
	 */
	public Article(String alias) {
		this(DSL.name(alias), ARTICLE);
	}

	/**
	 * Create an aliased <code>article</code> table reference
	 */
	public Article(Name alias) {
		this(alias, ARTICLE);
	}

	/**
	 * Create a <code>article</code> table reference
	 */
	public Article() {
		this(DSL.name("article"), null);
	}

	public <O extends Record> Article(Table<O> child, ForeignKey<O, ArticleRecord> key) {
		super(child, key, ARTICLE);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public Identity<ArticleRecord, Long> getIdentity() {
		return (Identity<ArticleRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<ArticleRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_D;
	}

	@Override
	public List<UniqueKey<ArticleRecord>> getUniqueKeys() {
		return Arrays.asList(Keys.CONSTRAINT_D4);
	}

	@Override
	public List<ForeignKey<ArticleRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_ARTICLE_USER);
	}

	private transient AppUser _appUser;

	/**
	 * Get the implicit join path to the <code>PUBLIC.app_user</code> table.
	 */
	public AppUser appUser() {
		if (_appUser == null)
			_appUser = new AppUser(this, Keys.FK_ARTICLE_USER);

		return _appUser;
	}

	@Override
	public Article as(String alias) {
		return new Article(DSL.name(alias), this);
	}

	@Override
	public Article as(Name alias) {
		return new Article(alias, this);
	}

	@Override
	public Article as(Table<?> alias) {
		return new Article(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Article rename(String name) {
		return new Article(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Article rename(Name name) {
		return new Article(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Article rename(Table<?> name) {
		return new Article(name.getQualifiedName(), null);
	}

	// -------------------------------------------------------------------------
	// Row8 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row8<Long, Long, String, String, String, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
		return (Row8) super.fieldsRow();
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
	 */
	public <U> SelectField<U> mapping(
			Function8<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
		return convertFrom(Records.mapping(from));
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
	 */
	public <U> SelectField<U> mapping(Class<U> toType,
			Function8<? super Long, ? super Long, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
		return convertFrom(toType, Records.mapping(from));
	}
}
