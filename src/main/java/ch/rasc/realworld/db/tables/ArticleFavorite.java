/*
 * This file is generated by jOOQ.
 */
package ch.rasc.realworld.db.tables;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ch.rasc.realworld.db.DefaultSchema;
import ch.rasc.realworld.db.Indexes;
import ch.rasc.realworld.db.Keys;
import ch.rasc.realworld.db.tables.records.ArticleFavoriteRecord;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.11.11" },
		comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleFavorite extends TableImpl<ArticleFavoriteRecord> {

	private static final long serialVersionUID = 1175537273;

	/**
	 * The reference instance of <code>ARTICLE_FAVORITE</code>
	 */
	public static final ArticleFavorite ARTICLE_FAVORITE = new ArticleFavorite();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ArticleFavoriteRecord> getRecordType() {
		return ArticleFavoriteRecord.class;
	}

	/**
	 * The column <code>ARTICLE_FAVORITE.ARTICLE_ID</code>.
	 */
	public final TableField<ArticleFavoriteRecord, Long> ARTICLE_ID = createField(
			"ARTICLE_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>ARTICLE_FAVORITE.USER_ID</code>.
	 */
	public final TableField<ArticleFavoriteRecord, Long> USER_ID = createField("USER_ID",
			org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * Create a <code>ARTICLE_FAVORITE</code> table reference
	 */
	public ArticleFavorite() {
		this(DSL.name("ARTICLE_FAVORITE"), null);
	}

	/**
	 * Create an aliased <code>ARTICLE_FAVORITE</code> table reference
	 */
	public ArticleFavorite(String alias) {
		this(DSL.name(alias), ARTICLE_FAVORITE);
	}

	/**
	 * Create an aliased <code>ARTICLE_FAVORITE</code> table reference
	 */
	public ArticleFavorite(Name alias) {
		this(alias, ARTICLE_FAVORITE);
	}

	private ArticleFavorite(Name alias, Table<ArticleFavoriteRecord> aliased) {
		this(alias, aliased, null);
	}

	private ArticleFavorite(Name alias, Table<ArticleFavoriteRecord> aliased,
			Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""));
	}

	public <O extends Record> ArticleFavorite(Table<O> child,
			ForeignKey<O, ArticleFavoriteRecord> key) {
		super(child, key, ARTICLE_FAVORITE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return DefaultSchema.DEFAULT_SCHEMA;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Index> getIndexes() {
		return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_B,
				Indexes.CONSTRAINT_INDEX_B0, Indexes.PRIMARY_KEY_B);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ArticleFavoriteRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_B;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ArticleFavoriteRecord>> getKeys() {
		return Arrays.<UniqueKey<ArticleFavoriteRecord>>asList(Keys.CONSTRAINT_B);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ArticleFavoriteRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ArticleFavoriteRecord, ?>>asList(Keys.CONSTRAINT_B0,
				Keys.CONSTRAINT_B05);
	}

	public Article article() {
		return new Article(this, Keys.CONSTRAINT_B0);
	}

	public AppUser appUser() {
		return new AppUser(this, Keys.CONSTRAINT_B05);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ArticleFavorite as(String alias) {
		return new ArticleFavorite(DSL.name(alias), this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ArticleFavorite as(Name alias) {
		return new ArticleFavorite(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ArticleFavorite rename(String name) {
		return new ArticleFavorite(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ArticleFavorite rename(Name name) {
		return new ArticleFavorite(name, null);
	}
}
