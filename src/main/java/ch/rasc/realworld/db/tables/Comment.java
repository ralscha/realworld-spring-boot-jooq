/*
 * This file is generated by jOOQ.
 */
package ch.rasc.realworld.db.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ch.rasc.realworld.db.DefaultSchema;
import ch.rasc.realworld.db.Keys;
import ch.rasc.realworld.db.tables.records.CommentRecord;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment extends TableImpl<CommentRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>COMMENT</code>
	 */
	public static final Comment COMMENT = new Comment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CommentRecord> getRecordType() {
		return CommentRecord.class;
	}

	/**
	 * The column <code>COMMENT.ID</code>.
	 */
	public final TableField<CommentRecord, Long> ID = createField(DSL.name("ID"),
			SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>COMMENT.BODY</code>.
	 */
	public final TableField<CommentRecord, String> BODY = createField(DSL.name("BODY"), SQLDataType.CLOB, this, "");

	/**
	 * The column <code>COMMENT.ARTICLE_ID</code>.
	 */
	public final TableField<CommentRecord, Long> ARTICLE_ID = createField(DSL.name("ARTICLE_ID"),
			SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>COMMENT.USER_ID</code>.
	 */
	public final TableField<CommentRecord, Long> USER_ID = createField(DSL.name("USER_ID"),
			SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>COMMENT.CREATED_AT</code>.
	 */
	public final TableField<CommentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("CREATED_AT"),
			SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

	/**
	 * The column <code>COMMENT.UPDATED_AT</code>.
	 */
	public final TableField<CommentRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("UPDATED_AT"), SQLDataType
			.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)),
			this, "");

	private Comment(Name alias, Table<CommentRecord> aliased) {
		this(alias, aliased, null);
	}

	private Comment(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>COMMENT</code> table reference
	 */
	public Comment(String alias) {
		this(DSL.name(alias), COMMENT);
	}

	/**
	 * Create an aliased <code>COMMENT</code> table reference
	 */
	public Comment(Name alias) {
		this(alias, COMMENT);
	}

	/**
	 * Create a <code>COMMENT</code> table reference
	 */
	public Comment() {
		this(DSL.name("COMMENT"), null);
	}

	public <O extends Record> Comment(Table<O> child, ForeignKey<O, CommentRecord> key) {
		super(child, key, COMMENT);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public Identity<CommentRecord, Long> getIdentity() {
		return (Identity<CommentRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<CommentRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_6;
	}

	@Override
	public List<ForeignKey<CommentRecord, ?>> getReferences() {
		return Arrays.asList(Keys.CONSTRAINT_637, Keys.CONSTRAINT_63);
	}

	private transient Article _article;
	private transient AppUser _appUser;

	/**
	 * Get the implicit join path to the <code>PUBLIC.ARTICLE</code> table.
	 */
	public Article article() {
		if (_article == null)
			_article = new Article(this, Keys.CONSTRAINT_637);

		return _article;
	}

	/**
	 * Get the implicit join path to the <code>PUBLIC.APP_USER</code> table.
	 */
	public AppUser appUser() {
		if (_appUser == null)
			_appUser = new AppUser(this, Keys.CONSTRAINT_63);

		return _appUser;
	}

	@Override
	public Comment as(String alias) {
		return new Comment(DSL.name(alias), this);
	}

	@Override
	public Comment as(Name alias) {
		return new Comment(alias, this);
	}

	@Override
	public Comment as(Table<?> alias) {
		return new Comment(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Comment rename(String name) {
		return new Comment(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Comment rename(Name name) {
		return new Comment(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Comment rename(Table<?> name) {
		return new Comment(name.getQualifiedName(), null);
	}

	// -------------------------------------------------------------------------
	// Row6 type methods
	// -------------------------------------------------------------------------

	@Override
	public Row6<Long, String, Long, Long, LocalDateTime, LocalDateTime> fieldsRow() {
		return (Row6) super.fieldsRow();
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
	 */
	public <U> SelectField<U> mapping(
			Function6<? super Long, ? super String, ? super Long, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
		return convertFrom(Records.mapping(from));
	}

	/**
	 * Convenience mapping calling {@link SelectField#convertFrom(Class, Function)}.
	 */
	public <U> SelectField<U> mapping(Class<U> toType,
			Function6<? super Long, ? super String, ? super Long, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
		return convertFrom(toType, Records.mapping(from));
	}
}
