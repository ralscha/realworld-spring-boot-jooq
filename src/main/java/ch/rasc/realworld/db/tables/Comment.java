/*
 * This file is generated by jOOQ.
 */
package ch.rasc.realworld.db.tables;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ch.rasc.realworld.db.DefaultSchema;
import ch.rasc.realworld.db.Indexes;
import ch.rasc.realworld.db.Keys;
import ch.rasc.realworld.db.tables.records.CommentRecord;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.11.11" },
		comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Comment extends TableImpl<CommentRecord> {

	private static final long serialVersionUID = -1970443933;

	/**
	 * The reference instance of <code>COMMENT</code>
	 */
	public static final Comment COMMENT = new Comment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CommentRecord> getRecordType() {
		return CommentRecord.class;
	}

	/**
	 * The column <code>COMMENT.ID</code>.
	 */
	public final TableField<CommentRecord, Long> ID = createField("ID",
			org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>COMMENT.BODY</code>.
	 */
	public final TableField<CommentRecord, String> BODY = createField("BODY",
			org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>COMMENT.ARTICLE_ID</code>.
	 */
	public final TableField<CommentRecord, Long> ARTICLE_ID = createField("ARTICLE_ID",
			org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>COMMENT.USER_ID</code>.
	 */
	public final TableField<CommentRecord, Long> USER_ID = createField("USER_ID",
			org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>COMMENT.CREATED_AT</code>.
	 */
	public final TableField<CommentRecord, LocalDateTime> CREATED_AT = createField(
			"CREATED_AT", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this,
			"");

	/**
	 * The column <code>COMMENT.UPDATED_AT</code>.
	 */
	public final TableField<CommentRecord, LocalDateTime> UPDATED_AT = createField(
			"UPDATED_AT",
			org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false)
					.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP()",
							org.jooq.impl.SQLDataType.LOCALDATETIME)),
			this, "");

	/**
	 * Create a <code>COMMENT</code> table reference
	 */
	public Comment() {
		this(DSL.name("COMMENT"), null);
	}

	/**
	 * Create an aliased <code>COMMENT</code> table reference
	 */
	public Comment(String alias) {
		this(DSL.name(alias), COMMENT);
	}

	/**
	 * Create an aliased <code>COMMENT</code> table reference
	 */
	public Comment(Name alias) {
		this(alias, COMMENT);
	}

	private Comment(Name alias, Table<CommentRecord> aliased) {
		this(alias, aliased, null);
	}

	private Comment(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""));
	}

	public <O extends Record> Comment(Table<O> child, ForeignKey<O, CommentRecord> key) {
		super(child, key, COMMENT);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return DefaultSchema.DEFAULT_SCHEMA;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Index> getIndexes() {
		return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_6,
				Indexes.CONSTRAINT_INDEX_63, Indexes.PRIMARY_KEY_6);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<CommentRecord, Long> getIdentity() {
		return Keys.IDENTITY_COMMENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<CommentRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_6;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<CommentRecord>> getKeys() {
		return Arrays.<UniqueKey<CommentRecord>>asList(Keys.CONSTRAINT_6);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<CommentRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<CommentRecord, ?>>asList(Keys.CONSTRAINT_637,
				Keys.CONSTRAINT_63);
	}

	public Article article() {
		return new Article(this, Keys.CONSTRAINT_637);
	}

	public AppUser appUser() {
		return new AppUser(this, Keys.CONSTRAINT_63);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Comment as(String alias) {
		return new Comment(DSL.name(alias), this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Comment as(Name alias) {
		return new Comment(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Comment rename(String name) {
		return new Comment(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Comment rename(Name name) {
		return new Comment(name, null);
	}
}
