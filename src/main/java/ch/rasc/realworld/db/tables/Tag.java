/*
 * This file is generated by jOOQ.
 */
package ch.rasc.realworld.db.tables;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ch.rasc.realworld.db.DefaultSchema;
import ch.rasc.realworld.db.Indexes;
import ch.rasc.realworld.db.Keys;
import ch.rasc.realworld.db.tables.records.TagRecord;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = { "http://www.jooq.org", "jOOQ version:3.11.11" },
		comments = "This class is generated by jOOQ")
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tag extends TableImpl<TagRecord> {

	private static final long serialVersionUID = -2103701580;

	/**
	 * The reference instance of <code>TAG</code>
	 */
	public static final Tag TAG = new Tag();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TagRecord> getRecordType() {
		return TagRecord.class;
	}

	/**
	 * The column <code>TAG.ID</code>.
	 */
	public final TableField<TagRecord, Long> ID = createField("ID",
			org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>TAG.NAME</code>.
	 */
	public final TableField<TagRecord, String> NAME = createField("NAME",
			org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

	/**
	 * Create a <code>TAG</code> table reference
	 */
	public Tag() {
		this(DSL.name("TAG"), null);
	}

	/**
	 * Create an aliased <code>TAG</code> table reference
	 */
	public Tag(String alias) {
		this(DSL.name(alias), TAG);
	}

	/**
	 * Create an aliased <code>TAG</code> table reference
	 */
	public Tag(Name alias) {
		this(alias, TAG);
	}

	private Tag(Name alias, Table<TagRecord> aliased) {
		this(alias, aliased, null);
	}

	private Tag(Name alias, Table<TagRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, DSL.comment(""));
	}

	public <O extends Record> Tag(Table<O> child, ForeignKey<O, TagRecord> key) {
		super(child, key, TAG);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return DefaultSchema.DEFAULT_SCHEMA;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Index> getIndexes() {
		return Arrays.<Index>asList(Indexes.PRIMARY_KEY_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<TagRecord, Long> getIdentity() {
		return Keys.IDENTITY_TAG;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TagRecord> getPrimaryKey() {
		return Keys.CONSTRAINT_1;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TagRecord>> getKeys() {
		return Arrays.<UniqueKey<TagRecord>>asList(Keys.CONSTRAINT_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Tag as(String alias) {
		return new Tag(DSL.name(alias), this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Tag as(Name alias) {
		return new Tag(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Tag rename(String name) {
		return new Tag(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Tag rename(Name name) {
		return new Tag(name, null);
	}
}
